"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require('@angular/router');
var ng2_simple_page_scroll_config_1 = require('./ng2-simple-page-scroll-config');
var SimplePageScroll = (function () {
    function SimplePageScroll(el, router) {
        this.el = el;
        this.router = router;
        this.simplePageScrollOffset = null;
        this.document = el.nativeElement.ownerDocument;
        this.body = el.nativeElement.ownerDocument.body;
    }
    SimplePageScroll.prototype.handleClick = function (event) {
        var _this = this;
        if (this.routerLink) {
            // We need to navigate their first.
            // Navigation is handled by the routerLink directive
            // so we only need to listen for route change
            // Note: the change event is also emitted when navigating to the current route again
            var subscription_1 = this.router.changes.subscribe(function () {
                subscription_1.unsubscribe();
                _this.scrollView(_this.href);
            });
        }
        else {
            this.scrollView(this.href);
        }
        return false; // to preventDefault()
    };
    SimplePageScroll.prototype.scrollView = function (anchor) {
        var anchorTarget = this.document.getElementById(anchor.substr(1));
        if (anchorTarget !== null) {
            setScrollTop(this.body);
            setScrollTop(this.document.documentElement);
            setScrollTop(this.document.body.parentNode);
        }
        function setScrollTop(container) {
            if (container && container.scrollTop) {
                container.scrollTop =
                    anchorTarget.offsetTop -
                        anchorTarget.scrollTop +
                        anchorTarget.clientTop +
                        ng2_simple_page_scroll_config_1.SimplePageScrollConfig.defaultScrollOffset;
            }
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], SimplePageScroll.prototype, "routerLink", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], SimplePageScroll.prototype, "href", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], SimplePageScroll.prototype, "simplePageScrollOffset", void 0);
    __decorate([
        core_1.HostListener('click', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Event]), 
        __metadata('design:returntype', Boolean)
    ], SimplePageScroll.prototype, "handleClick", null);
    SimplePageScroll = __decorate([
        core_1.Directive({
            selector: '[simplePageScroll]'
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, router_1.Router])
    ], SimplePageScroll);
    return SimplePageScroll;
}());
exports.SimplePageScroll = SimplePageScroll;
//# sourceMappingURL=ng2-simple-page-scroll.directive.js.map